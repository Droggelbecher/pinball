/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module mad;

static import mad_im;
static import core.stdc.config;

static import std.conv;
static import std.string;


int SIZEOF_INT() @property {
  auto ret = mad_im.SIZEOF_INT_get();
  return ret;
}

int SIZEOF_LONG() @property {
  auto ret = mad_im.SIZEOF_LONG_get();
  return ret;
}

int SIZEOF_LONG_LONG() @property {
  auto ret = mad_im.SIZEOF_LONG_LONG_get();
  return ret;
}

int MAD_VERSION_MAJOR() @property {
  auto ret = mad_im.MAD_VERSION_MAJOR_get();
  return ret;
}

int MAD_VERSION_MINOR() @property {
  auto ret = mad_im.MAD_VERSION_MINOR_get();
  return ret;
}

int MAD_VERSION_PATCH() @property {
  auto ret = mad_im.MAD_VERSION_PATCH_get();
  return ret;
}

string MAD_VERSION_EXTRA() @property {
  string ret = std.conv.to!string(mad_im.MAD_VERSION_EXTRA_get());
  return ret;
}

string MAD_VERSION() @property {
  string ret = std.conv.to!string(mad_im.MAD_VERSION_get());
  return ret;
}

string MAD_PUBLISHYEAR() @property {
  string ret = std.conv.to!string(mad_im.MAD_PUBLISHYEAR_get());
  return ret;
}

string MAD_AUTHOR() @property {
  string ret = std.conv.to!string(mad_im.MAD_AUTHOR_get());
  return ret;
}

string MAD_EMAIL() @property {
  string ret = std.conv.to!string(mad_im.MAD_EMAIL_get());
  return ret;
}

string mad_version() @property {
  string ret = std.conv.to!string(mad_im.mad_version_get());
  return ret;
}

string mad_copyright() @property {
  string ret = std.conv.to!string(mad_im.mad_copyright_get());
  return ret;
}

string mad_author() @property {
  string ret = std.conv.to!string(mad_im.mad_author_get());
  return ret;
}

string mad_build() @property {
  string ret = std.conv.to!string(mad_im.mad_build_get());
  return ret;
}

int MAD_F_FRACBITS() @property {
  auto ret = mad_im.MAD_F_FRACBITS_get();
  return ret;
}

int MAD_F_SCALEBITS() @property {
  auto ret = mad_im.MAD_F_SCALEBITS_get();
  return ret;
}

int mad_f_abs(int arg0) {
  auto ret = mad_im.mad_f_abs(arg0);
  return ret;
}

int mad_f_div(int arg0, int arg1) {
  auto ret = mad_im.mad_f_div(arg0, arg1);
  return ret;
}

class mad_bitptr {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mad_im.delete_mad_bitptr(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void _byte(ubyte* value) @property {
    mad_im.mad_bitptr__byte_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public ubyte* _byte() @property const {
    auto ret = cast(ubyte*)mad_im.mad_bitptr__byte_get(cast(void*)swigCPtr);
    return ret;
  }

  public void cache(ushort value) @property {
    mad_im.mad_bitptr_cache_set(cast(void*)swigCPtr, value);
  }

  public ushort cache() @property const {
    auto ret = mad_im.mad_bitptr_cache_get(cast(void*)swigCPtr);
    return ret;
  }

  public void left(ushort value) @property {
    mad_im.mad_bitptr_left_set(cast(void*)swigCPtr, value);
  }

  public ushort left() @property const {
    auto ret = mad_im.mad_bitptr_left_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(mad_im.new_mad_bitptr(), true);
  }
}

void mad_bit_init(mad_bitptr arg0, ubyte* arg1) {
  mad_im.mad_bit_init(mad_bitptr.swigGetCPtr(arg0), cast(void*)arg1);
}

uint mad_bit_length(mad_bitptr arg0, mad_bitptr arg1) {
  auto ret = mad_im.mad_bit_length(mad_bitptr.swigGetCPtr(arg0), mad_bitptr.swigGetCPtr(arg1));
  return ret;
}

ubyte* mad_bit_nextbyte(mad_bitptr arg0) {
  auto ret = cast(ubyte*)mad_im.mad_bit_nextbyte(mad_bitptr.swigGetCPtr(arg0));
  return ret;
}

void mad_bit_skip(mad_bitptr arg0, uint arg1) {
  mad_im.mad_bit_skip(mad_bitptr.swigGetCPtr(arg0), arg1);
}

core.stdc.config.c_ulong mad_bit_read(mad_bitptr arg0, uint arg1) {
  auto ret = mad_im.mad_bit_read(mad_bitptr.swigGetCPtr(arg0), arg1);
  return ret;
}

ushort mad_bit_crc(mad_bitptr arg0, uint arg1, ushort arg2) {
  auto ret = mad_im.mad_bit_crc(mad_bitptr.swigGetCPtr(arg0), arg1, arg2);
  if (mad_im.SwigPendingException.isPending) throw mad_im.SwigPendingException.retrieve();
  return ret;
}

class mad_timer_t {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mad_im.delete_mad_timer_t(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void seconds(core.stdc.config.c_long value) @property {
    mad_im.mad_timer_t_seconds_set(cast(void*)swigCPtr, value);
  }

  public core.stdc.config.c_long seconds() @property const {
    auto ret = mad_im.mad_timer_t_seconds_get(cast(void*)swigCPtr);
    return ret;
  }

  public void fraction(core.stdc.config.c_ulong value) @property {
    mad_im.mad_timer_t_fraction_set(cast(void*)swigCPtr, value);
  }

  public core.stdc.config.c_ulong fraction() @property const {
    auto ret = mad_im.mad_timer_t_fraction_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(mad_im.new_mad_timer_t(), true);
  }
}

mad_timer_t mad_timer_zero() @property {
  void* cPtr = mad_im.mad_timer_zero_get();
  mad_timer_t ret = (cPtr is null) ? null : new mad_timer_t(cPtr, false);
  return ret;
}

core.stdc.config.c_ulong MAD_TIMER_RESOLUTION() @property {
  auto ret = mad_im.MAD_TIMER_RESOLUTION_get();
  return ret;
}

enum mad_units {
  MAD_UNITS_HOURS = -2,
  MAD_UNITS_MINUTES = -1,
  MAD_UNITS_SECONDS = 0,
  MAD_UNITS_DECISECONDS = 10,
  MAD_UNITS_CENTISECONDS = 100,
  MAD_UNITS_MILLISECONDS = 1000,
  MAD_UNITS_8000_HZ = 8000,
  MAD_UNITS_11025_HZ = 11025,
  MAD_UNITS_12000_HZ = 12000,
  MAD_UNITS_16000_HZ = 16000,
  MAD_UNITS_22050_HZ = 22050,
  MAD_UNITS_24000_HZ = 24000,
  MAD_UNITS_32000_HZ = 32000,
  MAD_UNITS_44100_HZ = 44100,
  MAD_UNITS_48000_HZ = 48000,
  MAD_UNITS_24_FPS = 24,
  MAD_UNITS_25_FPS = 25,
  MAD_UNITS_30_FPS = 30,
  MAD_UNITS_48_FPS = 48,
  MAD_UNITS_50_FPS = 50,
  MAD_UNITS_60_FPS = 60,
  MAD_UNITS_75_FPS = 75,
  MAD_UNITS_23_976_FPS = -24,
  MAD_UNITS_24_975_FPS = -25,
  MAD_UNITS_29_97_FPS = -30,
  MAD_UNITS_47_952_FPS = -48,
  MAD_UNITS_49_95_FPS = -50,
  MAD_UNITS_59_94_FPS = -60
}

int mad_timer_compare(mad_timer_t arg0, mad_timer_t arg1) {
  auto ret = mad_im.mad_timer_compare(mad_timer_t.swigGetCPtr(arg0), mad_timer_t.swigGetCPtr(arg1));
  if (mad_im.SwigPendingException.isPending) throw mad_im.SwigPendingException.retrieve();
  return ret;
}

void mad_timer_negate(mad_timer_t arg0) {
  mad_im.mad_timer_negate(mad_timer_t.swigGetCPtr(arg0));
}

mad_timer_t mad_timer_abs(mad_timer_t arg0) {
  mad_timer_t ret = new mad_timer_t(mad_im.mad_timer_abs(mad_timer_t.swigGetCPtr(arg0)), true);
  if (mad_im.SwigPendingException.isPending) throw mad_im.SwigPendingException.retrieve();
  return ret;
}

void mad_timer_set(mad_timer_t arg0, core.stdc.config.c_ulong arg1, core.stdc.config.c_ulong arg2, core.stdc.config.c_ulong arg3) {
  mad_im.mad_timer_set(mad_timer_t.swigGetCPtr(arg0), arg1, arg2, arg3);
}

void mad_timer_add(mad_timer_t arg0, mad_timer_t arg1) {
  mad_im.mad_timer_add(mad_timer_t.swigGetCPtr(arg0), mad_timer_t.swigGetCPtr(arg1));
  if (mad_im.SwigPendingException.isPending) throw mad_im.SwigPendingException.retrieve();
}

void mad_timer_multiply(mad_timer_t arg0, core.stdc.config.c_long arg1) {
  mad_im.mad_timer_multiply(mad_timer_t.swigGetCPtr(arg0), arg1);
}

core.stdc.config.c_long mad_timer_count(mad_timer_t arg0, mad_units arg1) {
  auto ret = mad_im.mad_timer_count(mad_timer_t.swigGetCPtr(arg0), cast(int)arg1);
  if (mad_im.SwigPendingException.isPending) throw mad_im.SwigPendingException.retrieve();
  return ret;
}

core.stdc.config.c_ulong mad_timer_fraction(mad_timer_t arg0, core.stdc.config.c_ulong arg1) {
  auto ret = mad_im.mad_timer_fraction(mad_timer_t.swigGetCPtr(arg0), arg1);
  if (mad_im.SwigPendingException.isPending) throw mad_im.SwigPendingException.retrieve();
  return ret;
}

void mad_timer_string(mad_timer_t arg0, string arg1, string arg2, mad_units arg3, mad_units arg4, core.stdc.config.c_ulong arg5) {
  mad_im.mad_timer_string(mad_timer_t.swigGetCPtr(arg0), (arg1 ? std.string.toStringz(arg1) : null), (arg2 ? std.string.toStringz(arg2) : null), cast(int)arg3, cast(int)arg4, arg5);
  if (mad_im.SwigPendingException.isPending) throw mad_im.SwigPendingException.retrieve();
}

int MAD_BUFFER_GUARD() @property {
  auto ret = mad_im.MAD_BUFFER_GUARD_get();
  return ret;
}

int MAD_BUFFER_MDLEN() @property {
  auto ret = mad_im.MAD_BUFFER_MDLEN_get();
  return ret;
}

enum mad_error {
  MAD_ERROR_NONE = 0x0000,
  MAD_ERROR_BUFLEN = 0x0001,
  MAD_ERROR_BUFPTR = 0x0002,
  MAD_ERROR_NOMEM = 0x0031,
  MAD_ERROR_LOSTSYNC = 0x0101,
  MAD_ERROR_BADLAYER = 0x0102,
  MAD_ERROR_BADBITRATE = 0x0103,
  MAD_ERROR_BADSAMPLERATE = 0x0104,
  MAD_ERROR_BADEMPHASIS = 0x0105,
  MAD_ERROR_BADCRC = 0x0201,
  MAD_ERROR_BADBITALLOC = 0x0211,
  MAD_ERROR_BADSCALEFACTOR = 0x0221,
  MAD_ERROR_BADMODE = 0x0222,
  MAD_ERROR_BADFRAMELEN = 0x0231,
  MAD_ERROR_BADBIGVALUES = 0x0232,
  MAD_ERROR_BADBLOCKTYPE = 0x0233,
  MAD_ERROR_BADSCFSI = 0x0234,
  MAD_ERROR_BADDATAPTR = 0x0235,
  MAD_ERROR_BADPART3LEN = 0x0236,
  MAD_ERROR_BADHUFFTABLE = 0x0237,
  MAD_ERROR_BADHUFFDATA = 0x0238,
  MAD_ERROR_BADSTEREO = 0x0239
}

class mad_stream {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mad_im.delete_mad_stream(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void buffer(ubyte* value) @property {
    mad_im.mad_stream_buffer_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public ubyte* buffer() @property const {
    auto ret = cast(ubyte*)mad_im.mad_stream_buffer_get(cast(void*)swigCPtr);
    return ret;
  }

  public void bufend(ubyte* value) @property {
    mad_im.mad_stream_bufend_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public ubyte* bufend() @property const {
    auto ret = cast(ubyte*)mad_im.mad_stream_bufend_get(cast(void*)swigCPtr);
    return ret;
  }

  public void skiplen(core.stdc.config.c_ulong value) @property {
    mad_im.mad_stream_skiplen_set(cast(void*)swigCPtr, value);
  }

  public core.stdc.config.c_ulong skiplen() @property const {
    auto ret = mad_im.mad_stream_skiplen_get(cast(void*)swigCPtr);
    return ret;
  }

  public void sync(int value) @property {
    mad_im.mad_stream_sync_set(cast(void*)swigCPtr, value);
  }

  public int sync() @property const {
    auto ret = mad_im.mad_stream_sync_get(cast(void*)swigCPtr);
    return ret;
  }

  public void freerate(core.stdc.config.c_ulong value) @property {
    mad_im.mad_stream_freerate_set(cast(void*)swigCPtr, value);
  }

  public core.stdc.config.c_ulong freerate() @property const {
    auto ret = mad_im.mad_stream_freerate_get(cast(void*)swigCPtr);
    return ret;
  }

  public void this_frame(ubyte* value) @property {
    mad_im.mad_stream_this_frame_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public ubyte* this_frame() @property const {
    auto ret = cast(ubyte*)mad_im.mad_stream_this_frame_get(cast(void*)swigCPtr);
    return ret;
  }

  public void next_frame(ubyte* value) @property {
    mad_im.mad_stream_next_frame_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public ubyte* next_frame() @property const {
    auto ret = cast(ubyte*)mad_im.mad_stream_next_frame_get(cast(void*)swigCPtr);
    return ret;
  }

  public void ptr(mad_bitptr value) @property {
    mad_im.mad_stream_ptr_set(cast(void*)swigCPtr, mad_bitptr.swigGetCPtr(value));
  }

  public mad_bitptr ptr() @property const {
    void* cPtr = mad_im.mad_stream_ptr_get(cast(void*)swigCPtr);
    mad_bitptr ret = (cPtr is null) ? null : new mad_bitptr(cPtr, false);
    return ret;
  }

  public void anc_ptr(mad_bitptr value) @property {
    mad_im.mad_stream_anc_ptr_set(cast(void*)swigCPtr, mad_bitptr.swigGetCPtr(value));
  }

  public mad_bitptr anc_ptr() @property const {
    void* cPtr = mad_im.mad_stream_anc_ptr_get(cast(void*)swigCPtr);
    mad_bitptr ret = (cPtr is null) ? null : new mad_bitptr(cPtr, false);
    return ret;
  }

  public void anc_bitlen(uint value) @property {
    mad_im.mad_stream_anc_bitlen_set(cast(void*)swigCPtr, value);
  }

  public uint anc_bitlen() @property const {
    auto ret = mad_im.mad_stream_anc_bitlen_get(cast(void*)swigCPtr);
    return ret;
  }

  public void main_data(SWIGTYPE_p_a__511_2048_8___unsigned_char value) @property {
    mad_im.mad_stream_main_data_set(cast(void*)swigCPtr, SWIGTYPE_p_a__511_2048_8___unsigned_char.swigGetCPtr(value));
  }

  public SWIGTYPE_p_a__511_2048_8___unsigned_char main_data() @property const {
    void* cPtr = mad_im.mad_stream_main_data_get(cast(void*)swigCPtr);
    SWIGTYPE_p_a__511_2048_8___unsigned_char ret = (cPtr is null) ? null : new SWIGTYPE_p_a__511_2048_8___unsigned_char(cPtr, false);
    return ret;
  }

  public void md_len(uint value) @property {
    mad_im.mad_stream_md_len_set(cast(void*)swigCPtr, value);
  }

  public uint md_len() @property const {
    auto ret = mad_im.mad_stream_md_len_get(cast(void*)swigCPtr);
    return ret;
  }

  public void options(int value) @property {
    mad_im.mad_stream_options_set(cast(void*)swigCPtr, value);
  }

  public int options() @property const {
    auto ret = mad_im.mad_stream_options_get(cast(void*)swigCPtr);
    return ret;
  }

  public void error(mad_error value) @property {
    mad_im.mad_stream_error_set(cast(void*)swigCPtr, cast(int)value);
  }

  public mad_error error() @property const {
    mad_error ret = cast(mad_error)mad_im.mad_stream_error_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(mad_im.new_mad_stream(), true);
  }
}

enum {
  MAD_OPTION_IGNORECRC = 0x0001,
  MAD_OPTION_HALFSAMPLERATE = 0x0002
}

void mad_stream_init(mad_stream arg0) {
  mad_im.mad_stream_init(mad_stream.swigGetCPtr(arg0));
}

void mad_stream_finish(mad_stream arg0) {
  mad_im.mad_stream_finish(mad_stream.swigGetCPtr(arg0));
}

void mad_stream_buffer(mad_stream arg0, ubyte* arg1, core.stdc.config.c_ulong arg2) {
  mad_im.mad_stream_buffer(mad_stream.swigGetCPtr(arg0), cast(void*)arg1, arg2);
}

void mad_stream_skip(mad_stream arg0, core.stdc.config.c_ulong arg1) {
  mad_im.mad_stream_skip(mad_stream.swigGetCPtr(arg0), arg1);
}

int mad_stream_sync(mad_stream arg0) {
  auto ret = mad_im.mad_stream_sync(mad_stream.swigGetCPtr(arg0));
  return ret;
}

string mad_stream_errorstr(mad_stream arg0) {
  string ret = std.conv.to!string(mad_im.mad_stream_errorstr(mad_stream.swigGetCPtr(arg0)));
  return ret;
}

enum mad_layer {
  MAD_LAYER_I = 1,
  MAD_LAYER_II = 2,
  MAD_LAYER_III = 3
}

enum mad_mode {
  MAD_MODE_SINGLE_CHANNEL = 0,
  MAD_MODE_DUAL_CHANNEL = 1,
  MAD_MODE_JOINT_STEREO = 2,
  MAD_MODE_STEREO = 3
}

enum mad_emphasis {
  MAD_EMPHASIS_NONE = 0,
  MAD_EMPHASIS_50_15_US = 1,
  MAD_EMPHASIS_CCITT_J_17 = 3,
  MAD_EMPHASIS_RESERVED = 2
}

class mad_header {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mad_im.delete_mad_header(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void layer(mad_layer value) @property {
    mad_im.mad_header_layer_set(cast(void*)swigCPtr, cast(int)value);
  }

  public mad_layer layer() @property const {
    mad_layer ret = cast(mad_layer)mad_im.mad_header_layer_get(cast(void*)swigCPtr);
    return ret;
  }

  public void mode(mad_mode value) @property {
    mad_im.mad_header_mode_set(cast(void*)swigCPtr, cast(int)value);
  }

  public mad_mode mode() @property const {
    mad_mode ret = cast(mad_mode)mad_im.mad_header_mode_get(cast(void*)swigCPtr);
    return ret;
  }

  public void mode_extension(int value) @property {
    mad_im.mad_header_mode_extension_set(cast(void*)swigCPtr, value);
  }

  public int mode_extension() @property const {
    auto ret = mad_im.mad_header_mode_extension_get(cast(void*)swigCPtr);
    return ret;
  }

  public void emphasis(mad_emphasis value) @property {
    mad_im.mad_header_emphasis_set(cast(void*)swigCPtr, cast(int)value);
  }

  public mad_emphasis emphasis() @property const {
    mad_emphasis ret = cast(mad_emphasis)mad_im.mad_header_emphasis_get(cast(void*)swigCPtr);
    return ret;
  }

  public void bitrate(core.stdc.config.c_ulong value) @property {
    mad_im.mad_header_bitrate_set(cast(void*)swigCPtr, value);
  }

  public core.stdc.config.c_ulong bitrate() @property const {
    auto ret = mad_im.mad_header_bitrate_get(cast(void*)swigCPtr);
    return ret;
  }

  public void samplerate(uint value) @property {
    mad_im.mad_header_samplerate_set(cast(void*)swigCPtr, value);
  }

  public uint samplerate() @property const {
    auto ret = mad_im.mad_header_samplerate_get(cast(void*)swigCPtr);
    return ret;
  }

  public void crc_check(ushort value) @property {
    mad_im.mad_header_crc_check_set(cast(void*)swigCPtr, value);
  }

  public ushort crc_check() @property const {
    auto ret = mad_im.mad_header_crc_check_get(cast(void*)swigCPtr);
    return ret;
  }

  public void crc_target(ushort value) @property {
    mad_im.mad_header_crc_target_set(cast(void*)swigCPtr, value);
  }

  public ushort crc_target() @property const {
    auto ret = mad_im.mad_header_crc_target_get(cast(void*)swigCPtr);
    return ret;
  }

  public void flags(int value) @property {
    mad_im.mad_header_flags_set(cast(void*)swigCPtr, value);
  }

  public int flags() @property const {
    auto ret = mad_im.mad_header_flags_get(cast(void*)swigCPtr);
    return ret;
  }

  public void private_bits(int value) @property {
    mad_im.mad_header_private_bits_set(cast(void*)swigCPtr, value);
  }

  public int private_bits() @property const {
    auto ret = mad_im.mad_header_private_bits_get(cast(void*)swigCPtr);
    return ret;
  }

  public void duration(mad_timer_t value) @property {
    mad_im.mad_header_duration_set(cast(void*)swigCPtr, mad_timer_t.swigGetCPtr(value));
  }

  public mad_timer_t duration() @property const {
    void* cPtr = mad_im.mad_header_duration_get(cast(void*)swigCPtr);
    mad_timer_t ret = (cPtr is null) ? null : new mad_timer_t(cPtr, false);
    return ret;
  }

  public this() {
    this(mad_im.new_mad_header(), true);
  }
}

class mad_frame {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mad_im.delete_mad_frame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void header(mad_header value) @property {
    mad_im.mad_frame_header_set(cast(void*)swigCPtr, mad_header.swigGetCPtr(value));
  }

  public mad_header header() @property const {
    void* cPtr = mad_im.mad_frame_header_get(cast(void*)swigCPtr);
    mad_header ret = (cPtr is null) ? null : new mad_header(cPtr, false);
    return ret;
  }

  public void options(int value) @property {
    mad_im.mad_frame_options_set(cast(void*)swigCPtr, value);
  }

  public int options() @property const {
    auto ret = mad_im.mad_frame_options_get(cast(void*)swigCPtr);
    return ret;
  }

  public void sbsample(SWIGTYPE_p_a_36__a_32__int value) @property {
    mad_im.mad_frame_sbsample_set(cast(void*)swigCPtr, SWIGTYPE_p_a_36__a_32__int.swigGetCPtr(value));
  }

  public SWIGTYPE_p_a_36__a_32__int sbsample() @property const {
    void* cPtr = mad_im.mad_frame_sbsample_get(cast(void*)swigCPtr);
    SWIGTYPE_p_a_36__a_32__int ret = (cPtr is null) ? null : new SWIGTYPE_p_a_36__a_32__int(cPtr, false);
    return ret;
  }

  public void overlap(SWIGTYPE_p_a_2__a_32__a_18__int value) @property {
    mad_im.mad_frame_overlap_set(cast(void*)swigCPtr, SWIGTYPE_p_a_2__a_32__a_18__int.swigGetCPtr(value));
  }

  public SWIGTYPE_p_a_2__a_32__a_18__int overlap() @property const {
    void* cPtr = mad_im.mad_frame_overlap_get(cast(void*)swigCPtr);
    SWIGTYPE_p_a_2__a_32__a_18__int ret = (cPtr is null) ? null : new SWIGTYPE_p_a_2__a_32__a_18__int(cPtr, false);
    return ret;
  }

  public this() {
    this(mad_im.new_mad_frame(), true);
  }
}

enum {
  MAD_FLAG_NPRIVATE_III = 0x0007,
  MAD_FLAG_INCOMPLETE = 0x0008,
  MAD_FLAG_PROTECTION = 0x0010,
  MAD_FLAG_COPYRIGHT = 0x0020,
  MAD_FLAG_ORIGINAL = 0x0040,
  MAD_FLAG_PADDING = 0x0080,
  MAD_FLAG_I_STEREO = 0x0100,
  MAD_FLAG_MS_STEREO = 0x0200,
  MAD_FLAG_FREEFORMAT = 0x0400,
  MAD_FLAG_LSF_EXT = 0x1000,
  MAD_FLAG_MC_EXT = 0x2000,
  MAD_FLAG_MPEG_2_5_EXT = 0x4000
}

enum {
  MAD_PRIVATE_HEADER = 0x0100,
  MAD_PRIVATE_III = 0x001f
}

void mad_header_init(mad_header arg0) {
  mad_im.mad_header_init(mad_header.swigGetCPtr(arg0));
}

int mad_header_decode(mad_header arg0, mad_stream arg1) {
  auto ret = mad_im.mad_header_decode(mad_header.swigGetCPtr(arg0), mad_stream.swigGetCPtr(arg1));
  return ret;
}

void mad_frame_init(mad_frame arg0) {
  mad_im.mad_frame_init(mad_frame.swigGetCPtr(arg0));
}

void mad_frame_finish(mad_frame arg0) {
  mad_im.mad_frame_finish(mad_frame.swigGetCPtr(arg0));
}

int mad_frame_decode(mad_frame arg0, mad_stream arg1) {
  auto ret = mad_im.mad_frame_decode(mad_frame.swigGetCPtr(arg0), mad_stream.swigGetCPtr(arg1));
  return ret;
}

void mad_frame_mute(mad_frame arg0) {
  mad_im.mad_frame_mute(mad_frame.swigGetCPtr(arg0));
}

class mad_pcm {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mad_im.delete_mad_pcm(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void samplerate(uint value) @property {
    mad_im.mad_pcm_samplerate_set(cast(void*)swigCPtr, value);
  }

  public uint samplerate() @property const {
    auto ret = mad_im.mad_pcm_samplerate_get(cast(void*)swigCPtr);
    return ret;
  }

  public void channels(ushort value) @property {
    mad_im.mad_pcm_channels_set(cast(void*)swigCPtr, value);
  }

  public ushort channels() @property const {
    auto ret = mad_im.mad_pcm_channels_get(cast(void*)swigCPtr);
    return ret;
  }

  public void length(ushort value) @property {
    mad_im.mad_pcm_length_set(cast(void*)swigCPtr, value);
  }

  public ushort length() @property const {
    auto ret = mad_im.mad_pcm_length_get(cast(void*)swigCPtr);
    return ret;
  }

  public void samples(SWIGTYPE_p_a_1152__int value) @property {
    mad_im.mad_pcm_samples_set(cast(void*)swigCPtr, SWIGTYPE_p_a_1152__int.swigGetCPtr(value));
  }

  public SWIGTYPE_p_a_1152__int samples_() @property const {
    void* cPtr = mad_im.mad_pcm_samples_get(cast(void*)swigCPtr);
    SWIGTYPE_p_a_1152__int ret = (cPtr is null) ? null : new SWIGTYPE_p_a_1152__int(cPtr, false);
    return ret;
  }

  public int* samples() @property const {
	  import std.stdio;
    void* cPtr = mad_im.mad_pcm_samples_get(cast(void*)swigCPtr);
	//ubyte*ptr=cast(ubyte*)cPtr;
	//writeln("cPtr=%d%d%d%d", cPtr[0], cPtr[1], cPtr[2]j);
	return cast(int *)cPtr;
    //SWIGTYPE_p_a_1152__int ret = (cPtr is null) ? null : new SWIGTYPE_p_a_1152__int(cPtr, false);
    //return ret;
  }

  public this() {
    this(mad_im.new_mad_pcm(), true);
  }
}

class mad_synth {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mad_im.delete_mad_synth(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void filter(SWIGTYPE_p_a_2__a_2__a_16__a_8__int value) @property {
    mad_im.mad_synth_filter_set(cast(void*)swigCPtr, SWIGTYPE_p_a_2__a_2__a_16__a_8__int.swigGetCPtr(value));
  }

  public SWIGTYPE_p_a_2__a_2__a_16__a_8__int filter() @property const {
    void* cPtr = mad_im.mad_synth_filter_get(cast(void*)swigCPtr);
    SWIGTYPE_p_a_2__a_2__a_16__a_8__int ret = (cPtr is null) ? null : new SWIGTYPE_p_a_2__a_2__a_16__a_8__int(cPtr, false);
    return ret;
  }

  public void phase(uint value) @property {
    mad_im.mad_synth_phase_set(cast(void*)swigCPtr, value);
  }

  public uint phase() @property const {
    auto ret = mad_im.mad_synth_phase_get(cast(void*)swigCPtr);
    return ret;
  }

  public void pcm(mad_pcm value) @property {
    mad_im.mad_synth_pcm_set(cast(void*)swigCPtr, mad_pcm.swigGetCPtr(value));
  }

  public mad_pcm pcm() @property const {
    void* cPtr = mad_im.mad_synth_pcm_get(cast(void*)swigCPtr);
    mad_pcm ret = (cPtr is null) ? null : new mad_pcm(cPtr, false);
    return ret;
  }

  public this() {
    this(mad_im.new_mad_synth(), true);
  }
}

enum {
  MAD_PCM_CHANNEL_SINGLE = 0
}

enum {
  MAD_PCM_CHANNEL_DUAL_1 = 0,
  MAD_PCM_CHANNEL_DUAL_2 = 1
}

enum {
  MAD_PCM_CHANNEL_STEREO_LEFT = 0,
  MAD_PCM_CHANNEL_STEREO_RIGHT = 1
}

void mad_synth_init(mad_synth arg0) {
  mad_im.mad_synth_init(mad_synth.swigGetCPtr(arg0));
}

void mad_synth_mute(mad_synth arg0) {
  mad_im.mad_synth_mute(mad_synth.swigGetCPtr(arg0));
}

void mad_synth_frame(mad_synth arg0, mad_frame arg1) {
  mad_im.mad_synth_frame(mad_synth.swigGetCPtr(arg0), mad_frame.swigGetCPtr(arg1));
}

enum mad_decoder_mode {
  MAD_DECODER_MODE_SYNC = 0,
  MAD_DECODER_MODE_ASYNC
}

enum mad_flow {
  MAD_FLOW_CONTINUE = 0x0000,
  MAD_FLOW_STOP = 0x0010,
  MAD_FLOW_BREAK = 0x0011,
  MAD_FLOW_IGNORE = 0x0020
}

class mad_decoder {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mad_im.delete_mad_decoder(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void mode(mad_decoder_mode value) @property {
    mad_im.mad_decoder_mode_set(cast(void*)swigCPtr, cast(int)value);
  }

  public mad_decoder_mode mode() @property const {
    mad_decoder_mode ret = cast(mad_decoder_mode)mad_im.mad_decoder_mode_get(cast(void*)swigCPtr);
    return ret;
  }

  public void options(int value) @property {
    mad_im.mad_decoder_options_set(cast(void*)swigCPtr, value);
  }

  public int options() @property const {
    auto ret = mad_im.mad_decoder_options_get(cast(void*)swigCPtr);
    return ret;
  }

  public mad_decoder_async async() @property const {
    void* cPtr = mad_im.mad_decoder_async_get(cast(void*)swigCPtr);
    mad_decoder_async ret = (cPtr is null) ? null : new mad_decoder_async(cPtr, false);
    return ret;
  }

  public mad_decoder_sync sync() @property const {
    void* cPtr = mad_im.mad_decoder_sync_get(cast(void*)swigCPtr);
    mad_decoder_sync ret = (cPtr is null) ? null : new mad_decoder_sync(cPtr, false);
    return ret;
  }

  public void cb_data(void* value) @property {
    mad_im.mad_decoder_cb_data_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public void* cb_data() @property const {
    auto ret = cast(void*)mad_im.mad_decoder_cb_data_get(cast(void*)swigCPtr);
    return ret;
  }

  public void input_func(SWIGTYPE_p_f_p_void_p_struct_mad_stream__mad_flow value) @property {
    mad_im.mad_decoder_input_func_set(cast(void*)swigCPtr, SWIGTYPE_p_f_p_void_p_struct_mad_stream__mad_flow.swigGetCPtr(value));
  }

  public SWIGTYPE_p_f_p_void_p_struct_mad_stream__mad_flow input_func() @property const {
    void* cPtr = mad_im.mad_decoder_input_func_get(cast(void*)swigCPtr);
    SWIGTYPE_p_f_p_void_p_struct_mad_stream__mad_flow ret = (cPtr is null) ? null : new SWIGTYPE_p_f_p_void_p_struct_mad_stream__mad_flow(cPtr, false);
    return ret;
  }

  public void header_func(SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header__mad_flow value) @property {
    mad_im.mad_decoder_header_func_set(cast(void*)swigCPtr, SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header__mad_flow.swigGetCPtr(value));
  }

  public SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header__mad_flow header_func() @property const {
    void* cPtr = mad_im.mad_decoder_header_func_get(cast(void*)swigCPtr);
    SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header__mad_flow ret = (cPtr is null) ? null : new SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header__mad_flow(cPtr, false);
    return ret;
  }

  public void filter_func(SWIGTYPE_p_f_p_void_p_q_const__struct_mad_stream_p_struct_mad_frame__mad_flow value) @property {
    mad_im.mad_decoder_filter_func_set(cast(void*)swigCPtr, SWIGTYPE_p_f_p_void_p_q_const__struct_mad_stream_p_struct_mad_frame__mad_flow.swigGetCPtr(value));
  }

  public SWIGTYPE_p_f_p_void_p_q_const__struct_mad_stream_p_struct_mad_frame__mad_flow filter_func() @property const {
    void* cPtr = mad_im.mad_decoder_filter_func_get(cast(void*)swigCPtr);
    SWIGTYPE_p_f_p_void_p_q_const__struct_mad_stream_p_struct_mad_frame__mad_flow ret = (cPtr is null) ? null : new SWIGTYPE_p_f_p_void_p_q_const__struct_mad_stream_p_struct_mad_frame__mad_flow(cPtr, false);
    return ret;
  }

  public void output_func(SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header_p_struct_mad_pcm__mad_flow value) @property {
    mad_im.mad_decoder_output_func_set(cast(void*)swigCPtr, SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header_p_struct_mad_pcm__mad_flow.swigGetCPtr(value));
  }

  public SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header_p_struct_mad_pcm__mad_flow output_func() @property const {
    void* cPtr = mad_im.mad_decoder_output_func_get(cast(void*)swigCPtr);
    SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header_p_struct_mad_pcm__mad_flow ret = (cPtr is null) ? null : new SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header_p_struct_mad_pcm__mad_flow(cPtr, false);
    return ret;
  }

  public void error_func(SWIGTYPE_p_f_p_void_p_struct_mad_stream_p_struct_mad_frame__mad_flow value) @property {
    mad_im.mad_decoder_error_func_set(cast(void*)swigCPtr, SWIGTYPE_p_f_p_void_p_struct_mad_stream_p_struct_mad_frame__mad_flow.swigGetCPtr(value));
  }

  public SWIGTYPE_p_f_p_void_p_struct_mad_stream_p_struct_mad_frame__mad_flow error_func() @property const {
    void* cPtr = mad_im.mad_decoder_error_func_get(cast(void*)swigCPtr);
    SWIGTYPE_p_f_p_void_p_struct_mad_stream_p_struct_mad_frame__mad_flow ret = (cPtr is null) ? null : new SWIGTYPE_p_f_p_void_p_struct_mad_stream_p_struct_mad_frame__mad_flow(cPtr, false);
    return ret;
  }

  public void message_func(mad_im.SwigExternC!(mad_flow function(void*, void*, uint*)) value) @property {
    mad_im.mad_decoder_message_func_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public mad_im.SwigExternC!(mad_flow function(void*, void*, uint*)) message_func() @property const {
    auto ret = cast(mad_im.SwigExternC!(mad_flow function(void*, void*, uint*)))mad_im.mad_decoder_message_func_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(mad_im.new_mad_decoder(), true);
  }
}

class mad_decoder_sync {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mad_im.delete_mad_decoder_sync(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void stream(mad_stream value) @property {
    mad_im.mad_decoder_sync_stream_set(cast(void*)swigCPtr, mad_stream.swigGetCPtr(value));
  }

  public mad_stream stream() @property const {
    void* cPtr = mad_im.mad_decoder_sync_stream_get(cast(void*)swigCPtr);
    mad_stream ret = (cPtr is null) ? null : new mad_stream(cPtr, false);
    return ret;
  }

  public void frame(mad_frame value) @property {
    mad_im.mad_decoder_sync_frame_set(cast(void*)swigCPtr, mad_frame.swigGetCPtr(value));
  }

  public mad_frame frame() @property const {
    void* cPtr = mad_im.mad_decoder_sync_frame_get(cast(void*)swigCPtr);
    mad_frame ret = (cPtr is null) ? null : new mad_frame(cPtr, false);
    return ret;
  }

  public void synth(mad_synth value) @property {
    mad_im.mad_decoder_sync_synth_set(cast(void*)swigCPtr, mad_synth.swigGetCPtr(value));
  }

  public mad_synth synth() @property const {
    void* cPtr = mad_im.mad_decoder_sync_synth_get(cast(void*)swigCPtr);
    mad_synth ret = (cPtr is null) ? null : new mad_synth(cPtr, false);
    return ret;
  }

  public this() {
    this(mad_im.new_mad_decoder_sync(), true);
  }
}

class mad_decoder_async {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mad_im.delete_mad_decoder_async(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void pid(core.stdc.config.c_long value) @property {
    mad_im.mad_decoder_async_pid_set(cast(void*)swigCPtr, value);
  }

  public core.stdc.config.c_long pid() @property const {
    auto ret = mad_im.mad_decoder_async_pid_get(cast(void*)swigCPtr);
    return ret;
  }

  public void _in(int value) @property {
    mad_im.mad_decoder_async__in_set(cast(void*)swigCPtr, value);
  }

  public int _in() @property const {
    auto ret = mad_im.mad_decoder_async__in_get(cast(void*)swigCPtr);
    return ret;
  }

  public void _out(int value) @property {
    mad_im.mad_decoder_async__out_set(cast(void*)swigCPtr, value);
  }

  public int _out() @property const {
    auto ret = mad_im.mad_decoder_async__out_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(mad_im.new_mad_decoder_async(), true);
  }
}

void mad_decoder_init(mad_decoder arg0, void* arg1, SWIGTYPE_p_f_p_void_p_struct_mad_stream__mad_flow arg2, SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header__mad_flow arg3, SWIGTYPE_p_f_p_void_p_q_const__struct_mad_stream_p_struct_mad_frame__mad_flow arg4, SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header_p_struct_mad_pcm__mad_flow arg5, SWIGTYPE_p_f_p_void_p_struct_mad_stream_p_struct_mad_frame__mad_flow arg6, mad_im.SwigExternC!(mad_flow function(void*, void*, uint*)) arg7) {
  mad_im.mad_decoder_init(mad_decoder.swigGetCPtr(arg0), cast(void*)arg1, SWIGTYPE_p_f_p_void_p_struct_mad_stream__mad_flow.swigGetCPtr(arg2), SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header__mad_flow.swigGetCPtr(arg3), SWIGTYPE_p_f_p_void_p_q_const__struct_mad_stream_p_struct_mad_frame__mad_flow.swigGetCPtr(arg4), SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header_p_struct_mad_pcm__mad_flow.swigGetCPtr(arg5), SWIGTYPE_p_f_p_void_p_struct_mad_stream_p_struct_mad_frame__mad_flow.swigGetCPtr(arg6), cast(void*)arg7);
}

int mad_decoder_finish(mad_decoder arg0) {
  auto ret = mad_im.mad_decoder_finish(mad_decoder.swigGetCPtr(arg0));
  return ret;
}

int mad_decoder_run(mad_decoder arg0, mad_decoder_mode arg1) {
  auto ret = mad_im.mad_decoder_run(mad_decoder.swigGetCPtr(arg0), cast(int)arg1);
  return ret;
}

int mad_decoder_message(mad_decoder arg0, void* arg1, uint* arg2) {
  auto ret = mad_im.mad_decoder_message(mad_decoder.swigGetCPtr(arg0), cast(void*)arg1, cast(void*)arg2);
  return ret;
}

class SWIGTYPE_p_a__511_2048_8___unsigned_char {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_a_2__a_32__a_18__int {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_a_2__a_2__a_16__a_8__int {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_f_p_void_p_struct_mad_stream__mad_flow {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header__mad_flow {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_f_p_void_p_q_const__struct_mad_stream_p_struct_mad_frame__mad_flow {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_f_p_void_p_struct_mad_stream_p_struct_mad_frame__mad_flow {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_a_36__a_32__int {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_a_1152__int {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_f_p_void_p_q_const__struct_mad_header_p_struct_mad_pcm__mad_flow {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin mad_im.SwigOperatorDefinitions;
}
